import type { NextPage } from "next";
import { useEffect, useState } from "react";
import { GetServerSideProps } from "next";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import {
  Navbar,
  Container,
  Button,
  Dropdown,
  ButtonGroup,
  NavDropdown,
} from "react-bootstrap";
import Avatar from "../components/Avatar";
import AssetImage from "../components/AssetImage";
import { User, Collection, Asset } from "../models";
import { ethers } from "ethers";
import { time } from "console";

type Props = {
  users: User[];
  collections: Collection[];
  assets: Asset[];
};

const Home: NextPage = (props: Props) => {
  const [isConnected, setConnected] = useState(false);
  const [provider, setProvider] = useState(null);
  const [signer, setSigner] = useState(null);
  const [address, setAddress] = useState("");
  const [isError, setError] = useState(false);

  const connect = async () => {
    let _signer;
    let _address;
    if (!isConnected) {
      const _provider = new ethers.providers.Web3Provider(window.ethereum);
      await _provider.send("eth_requestAccounts", []);
      const network = await _provider.getNetwork();
      if (network.chainId !== 1) {
        alert("Please connect to Ethereum Mainnet");
        return;
      }
      setProvider(_provider);
      _signer = _provider.getSigner();
      setSigner(_signer);
      _address = await _signer.getAddress();
      if (ethers.utils.isAddress(_address)) {
        setConnected(true);
        setAddress(_address);
        login(_signer, _address);
      } else {
        setError(true);
      }
    }
  };

  const login = async (_signer, _address) => {
    fetch("/api/user/" + _address, {
      method: "GET",
      headers: { "Content-Type": "application/json" },
    })
      .then((response) => response.json())
      .then(async (res) => {
        if (res.status == "ok") {
          if (res.nonce) {
            let timestamp = new Date().getTime();
            const message = `Welcome to ApeUniverse.\n
            Nonce: ${res.nonce}\nTimestamp: ${timestamp}`;
            try {
              const signature = await _signer.signMessage(message);

              let postObj = {
                address: _address,
                timestamp: timestamp,
                signature: signature,
              };
              fetch("/api/user", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(postObj),
              })
                .then((response) => response.json())
                .then((res) => {
                  console.log(res);
                })
                .catch((err) => {
                  alert(err);
                });
            } catch (err) {
              alert(err);
            }
          } else {
            // redirect
          }
        } else {
          alert("Something strange occured. Please contact admin.");
        }
      })
      .catch((err) => {
        console.log("ERROR: GET api/user/[address] ===>", err);
      });
  };

  const disconnect = () => {
    setAddress("");
    setSigner(null);
    setConnected(false);
  };

  return (
    <>
      {/* <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head> */}
      <Navbar bg="dark" variant="dark">
        <Container>
          <Navbar.Brand href="#home">
            <img
              alt="ApeUniverse.eth"
              src="/logo.png"
              width="90"
              height="30"
              className="d-inline-block align-top"
            />
          </Navbar.Brand>
          <div className="d-flex">
            {isConnected ? (
              <>
                <Dropdown as={ButtonGroup}>
                  <Button variant="outline-success">
                    {address.slice(0, 6) + "......" + address.slice(-6)}
                  </Button>
                  <Dropdown.Toggle
                    split
                    variant="outline-success"
                    id="dropdown-split-basic"
                  />
                  <Dropdown.Menu>
                    <Dropdown.Item href="/profile">Profile</Dropdown.Item>
                    <NavDropdown.Divider />
                    <Dropdown.Item onClick={disconnect}>
                      Disconnect
                    </Dropdown.Item>
                  </Dropdown.Menu>
                </Dropdown>
                {/* <NavDropdown
                  title={address.slice(0, 6) + "......" + address.slice(-6)}
                  id="basic-nav-dropdown"
                >
                  <NavDropdown.Item href="/profile">Profile</NavDropdown.Item>
                  <NavDropdown.Divider />
                  <NavDropdown.Item onClick={disconnect}>
                    Disconnect
                  </NavDropdown.Item>
                </NavDropdown> */}
              </>
            ) : (
              <Button variant="warning" onClick={connect}>
                Connect Wallet
              </Button>
            )}
          </div>
        </Container>
      </Navbar>
      <Container fluid>
        <main className={styles.main}>
          <h1 className={styles.title}>
            Welcome to <span>ApeUniverse</span>
          </h1>

          <p className={styles.description}>
            你以为是元宇宙{"，"}其实是猿宇宙
            <br />
            <code className={styles.code}>
              没有所谓BAYC大佬{"，"}就是几百个碰巧2021年5月上车的{"，"}
              并且还拿到现在的
            </code>
          </p>

          <h4 className={styles.title}>Members</h4>

          <div className={styles.grid}>
            {props.users.map((user) => (
              <Avatar key={user.id} user={user} />
            ))}
          </div>

          {props.collections.map((collection) => (
            <div key={collection.id}>
              <h4 className={styles.title}>{collection.name}</h4>
              <div className={styles.grid}>
                {collection.Asset?.length > 0 ??
                  collection.Asset.map((asset) => (
                    <AssetImage
                      key={asset.id}
                      asset={asset}
                      collection={collection}
                    />
                  ))}
              </div>
            </div>
          ))}
        </main>

        <footer className={styles.footer}>
          <a
            href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            target="_blank"
            rel="noopener noreferrer"
          >
            Powered by{" "}
            <span className={styles.logo}>
              <Image src="/vercel.svg" alt="LikKee" width={72} height={16} />
            </span>
          </a>
        </footer>
      </Container>
    </>
  );
};

export const getServerSideProps: GetServerSideProps = async () => {
  let res = await fetch("http://localhost:3000/api/user");
  const users = await res.json();
  res = await fetch("http://localhost:3000/api/collection");
  const collections = await res.json();
  return {
    props: { users, collections },
  };
};

export default Home;
